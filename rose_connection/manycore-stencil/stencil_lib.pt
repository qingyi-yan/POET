include OptHighLevel.pi

<parameter cp_lmem type=0..1 default=0 />
<parameter use_reg type=0..1 default=0 />
<parameter cp_num type=INT default=0 />
<parameter add_timing type=0|1 default=0 message="whether to insert timing information" />
<parameter gpu default=0 message="whether to target GPU"/>

<code Both pars=(dim_idx, v1)> @v1@ </code>
<code LB pars=(dim_idx, v1)> @v1@ </code>
<code StencilDim pars=(i,lo,hi,dist,dim)/>

<xform gen_remote_loc pars=(dim,dim_idx,loc) 
       old_loc="" >
 if (old_loc == "") old_loc = gen_local_loc(dim);
 res=NULL;  i = 0;
 for (p_loc=old_loc; p_loc != NULL; (p_loc=cdr(p_loc); i=i+1))  
 { res = ((i==dim_idx)? loc : (car p_loc))::res; } 
 res
</xform>

<xform convert_linearized_subscript pars=(sub)>
     if (cdr(sub)==NULL) {
        dimspec = GLOBAL.STENCIL_CP_DIMS;
        sub = REBUILD(sub);
        (succ, is_const, is_pos, offset, left) = DimOffset(sub, dimspec);
        assert(succ && left == 0);
        sub = ReverseList(offset);
     }
     sub
</xform>


<xform gen_local_refs pars=(old_array, array, dim,body) >
  repl=NULL;
  foreach (body : (cur=GLOBAL.STENCIL_REF#( (cur_array=old_array|array), sub=_)): TRUE) {
      <* find each stencil array reference in the code, replace it with local array reference*>
     sub = convert_linearized_subscript(sub);
     repl = (cur, CODE.manycore_stencil_local_arr#(cur_array,dim,sub))::repl; 
  }
  if (repl != NULL) {
      repl=ReverseList(repl);
      body=REPLACE(repl,body); <* perform the replacement transformation *>
  }
  body
</xform>

<********************************* 
    gen_manycore_stencil_local: Generate local code of the stencil kernel
        oldarray/newarray: stencil arrays; 
        dimsizes: stencil dimensions; 
        body: stencil code
*********************************>
<xform gen_manycore_stencil_local pars=(body) 
       ivarinfo=GLOBAL.STENCIL_DATA_IVARS_INFO hallo="">
  (ivars,_,_) = ivarinfo;
  init=NULL; len = LEN(ivars); index = len-1; 
  <*traverse each stencil dimension  *>
  for (p = ivars; p != NULL && p != ""; (p = cdr(p),index=index-1)) { 
     <* current dimension information *>
     i = car(p);
     <*replace global loop with local loop *>
     foreach n=Nest#((ctrl=Loop#(i,lo=_,hi=_,dist=_)|CODE.For#(TypeInfo#(_,i,CODE.VarInit#lo=_)|Assign#(i,lo=_),Bop#("<",i,hi=_)|Bop#("!=",i,hi=_),incr=(Uop#("++",i)|VarRef#(i,"++")|Assign#(i,Bop#("+",i,dist=_))|FunctionCall#("++",i)))),b1=_) \in body do 
       assert(lo : INT);
       dist = lo;  lo=0;
       body = REPLACE( n,CODE.LocalStencil#(StencilDim#(i,lo,hi,dist,len), len-index-1,b1), body);
       break; 
     enddo
     init = LocalIndexInit#(i,index)::init;
  }
  if (hallo != "") {
    for (p = hallo; p != NULL; (p = cdr(p),index=index+1)) {
        CODE.HalloDim#(i,lo,hi,_) = car p; 
        init = LocalIndexInit#(i,index)::init;
    }
  }
  (init,body)
</xform>


<* 
    at_stencil_boundary: Check  whether it is in the boundary or not
        sub: subscript 
        dim: stencil dimensions 
        i: stencil index
        disp: displacement
*>
<xform at_stencil_boundary pars=(sub, dim, dim_idx, disp)>
  local_loc = gen_local_loc(dim);
  sub = REBUILD(sub);  
  switch (sub) {
     case CODE.manycore_stencil_size#(dim_idx, local_loc): 
         if (disp > 0) { 1 } else { 0 }
     case CODE.Bop#("+",CODE.manycore_stencil_size#(dim_idx, local_loc),dist=_) |
           CODE.Bop#("+",dist=_,CODE.manycore_stencil_size#(dim_idx,local_loc)): 
         if (disp > 0) { (dist < 0)? 0 : (dist >= 0)? dist+1 : (print ("dist=" dist); assert(0)) }
         else { 0 }
     case CODE.Bop#("+",CODE.LB#(dim_idx,lb=_),dist=_) 
         | CODE.Bop#("+",dist=_,CODE.LB#(dim_idx,lb=_)): 
         dist = lb + dist;
         if (disp > 0) { (dist < 0)? 0 : (dist >= 0)? dist+1 : (print ("dist=" dist); assert(0)) }
         else { (dist < 0)? -dist : 0 }
     case CODE.Bop#("+",CODE.Both#(dim_idx,_),dist=_) | CODE.Bop#("+",dist=_,CODE.Both#(dim_idx,_)): 
         if (disp > 0) { (dist < 0)? 0 : (dist >= 0)? dist : (print ("dist=" dist); assert(0)) }
         else { (dist < 0)? -dist : 0 }
     case CODE.Bop#("-",CODE.manycore_stencil_size#(dim_idx,local_loc)|CODE.Both#(dim_idx,_),dist=_) :
         if (disp > 0) { 0 } 
         else { (dist >= 0)? 0 : (dist < 0)? -dist :  (print ("dist=" dist); assert(0)) }
     case LB#(dim_idx,dist=INT): 
       if (disp > 0) { 0 }
       else { (dist < 0)? -dist : 0 }
     case dist=INT:   
       if (disp > 0) { 0 }
       else { (dist < 0)? -dist : 0 }
     case Both#(dim_idx,dist=INT): 
       if (disp > 0) { 0 }
       else { (dist < 0)? -dist : 0 }
     default:  <*print(dim_idx ":" sub);*> 0
  }
</xform>

<********************************* 
   replace_boundary_arr_accesses: Replace the boundary of array accesses
      loclist: boundary locations (e.g., left or right. (left right) means a single column 
      array: stencil array 
      dim: stencil dimension information 
      dim_idx: the index of the current stencil dimension 
      res: result
**********************************>

<xform replace_boundary_arr_accesses pars=(loclist, array, dim_spec, dim_idx, res)  >
  dim=(car GLOBAL.STENCIL_DATA_INFO)[1];

 arr_name=InnerName(GLOBAL.STENCIL_array);
 CODE.StencilDim#(i,_,_,_,_) = dim_spec;

 old_loc="";
 target = DELAY{CODE.manycore_stencil_remote_arr_access#(CODE.manycore_stencil_remote_arr#(arr_name,old_loc=_), sub=_) 
                | (GLOBAL.STENCIL_REF#(array, sub=_))};
 cp_res = NULL;
 foreach (ERASE(res) : (cur=target): TRUE) {
    sub = convert_linearized_subscript(sub);
    remote_loc = "";
    for (p_loc = loclist; p_loc != NULL && remote_loc==""; p_loc=cdr(p_loc)) {
      loc = car(p_loc);
        disp = (loc:"left")? -1 : 1; 
        sub_idx = 0; 
        for (p_sub = sub; p_sub != NULL && sub_idx <= dim_idx; p_sub = cdr(p_sub)) 
        { 
          curdim = car(p_sub); 
          sub_idx = sub_idx+1;
        }
        nsub = sub; 
        dist = at_stencil_boundary(curdim, dim, dim_idx, disp);
        if (dist != 0) {
           remote_loc = gen_remote_loc[old_loc=old_loc](dim,dim_idx,loc);
           nsub = REPLACE(curdim, ((disp< 0)?manycore_stencil_size#(dim_idx,remote_loc)-dist : dist-1), nsub);
           if (old_loc != "") {
              nsub = REPLACE(old_loc, remote_loc, nsub);
           }
         }
    }
    if (remote_loc != "") {
           res = REPLACE(cur, CODE.manycore_stencil_remote_arr_access#(CODE.manycore_stencil_remote_arr#(arr_name,remote_loc), nsub), res); 
      }
 }
 res 
</xform>

<xform gen_stencil_boundary_condition pars=(dim, dim_index, loclist)>
  res = NULL;
  for (p = ReverseList(loclist); p != NULL; p = cdr(p)) {
    remote_loc=gen_remote_loc(dim,dim_index, car p); 
    c = Bop#("&&", Bop#(">",manycore_stencil_size#(dim_index,remote_loc),0), 
                Uop#("!",is_boundary_core#(dim_index, car p,dim))); 
    if (res == NULL)  res = c;
    else res = Bop#("&&", c, res);
  }
  res
</xform>

<********************************* 
 gen_stencil_boundary: Generate boundary of stencil block
      loc: left or right. (left,right) means a single column 
      oldarray/array: stencil arrays 
      dim: stencil dimension information 
      dim_idx: the index of the current stencil dimension 
      local: local stencil computation 
*********************************>
<xform gen_stencil_boundary_help pars=(loc,p_dim,dim_idx,st_local) > 
  dim=(car GLOBAL.STENCIL_DATA_INFO)[1]; 
  oldarray=InnerName(GLOBAL.STENCIL_old_array);
  array=InnerName(GLOBAL.STENCIL_array);
  cur_dim = car(p_dim);

  <* find the loop that traverses the current dimension and remove it from local*>
  res=st_local; 
  if (!Lookup(CODE.LocalStencil,st_local)) return res; 
  body=""; d="";
  foreach (ERASE(st_local) : (cur=CODE.LocalStencil#(d=_,_,body_now=_)):FALSE) {
    CODE.StencilDim#(i=_,lo=_,hi=_,dist=_,_) = d;
    body=StmtBlock#body_now;
    if (i == cur_dim) { res = REPLACE(cur, body, res); break; }
  }
  assert(body!="" && d !="");

   <* Translate st_local index variable to boundary value  *>
  assert(!(dist<=0)); body1 = body; nbody = NULL;
  <<*assert(ivar!="");
  switch (loc) {
  case "left": 
      for (v = 0; v < dist; v=v+1)  {
        body1=body;
        foreach ivar=i \in body do 
            body1 = REPLACE(ivar, LB#(dim_idx,REBUILD(lo+v)), body1);
        enddo
        nbody = body1::nbody; 
      }
  case "right": 
      for (v = 1; v <= dist; v=v+1)  {
        body1=body;
        foreach ivar=i \in body do 
          body1=REPLACE(ivar, manycore_stencil_size#(dim_idx,gen_local_loc(dim))-v, body1);
        enddo
        nbody = body1::nbody; 
      }
  case ("left" "right"):
      for (v = 0; v < dist; v=v+1)  {
        body1=body;
        foreach ivar=i \in body do 
          body1 = REPLACE(ivar, Both#(dim_idx,REBUILD(lo+v)), body1);
        enddo
        nbody = body1::nbody; 
      }
  }
  res = REPLACE(body,nbody,res);
  <* Replace st_local stencil array references with remote neighbor accesses*>
   res = replace_boundary_arr_accesses(loc, array, d, dim_idx, res); 

  res
</xform>

<xform gen_stencil_boundary pars=(p_dim, index, st_local) 
       do_corners=1 > 
      cur_dim = car(p_dim); res = NULL; dim=(car GLOBAL.STENCIL_DATA_INFO)[1];
    
      res1=NULL;
      for ( p=("right" "left"); p != NULL; p = cdr(p)) {
         cur_loc = car(p);
         edge = gen_stencil_boundary_help(cur_loc,p_dim,index,st_local);
         if (do_corners) {
           edge1 = XFORM.gen_stencil_boundaries
                 [datainfo=(cdr(p_dim),"","");index=index+1](edge);
           edge = AppendList(edge, edge1);
         }
         if (edge != NULL)
            res1 = Nest#(If#(gen_stencil_boundary_condition(dim, index, cur_loc)), edge) :: res1;
      }
      if (res1 != NULL) {
         res1=Nest#(If#(Bop#(">",manycore_stencil_size#(index,gen_local_loc(dim)),1)),res1);
         cur_loc = ("left" "right");
         res2=gen_stencil_boundary_help(cur_loc,p_dim,index,st_local);
         if (do_corners) res2 = AppendList(res2,gen_stencil_boundaries
               [datainfo=(cdr(p_dim),"","");index=index+1](res2));  <<* corners 
         res=AppendList(res,res1 :: Nest#(CODE.Else#("",res2), Nest#(If#(gen_stencil_boundary_condition(dim,index,cur_loc)), res2))); 
      }
   res
</xform>

<xform gen_stencil_boundaries pars=(st_local)  index = 0
       datainfo=GLOBAL.STENCIL_DATA_IVARS_INFO 
       old_array=GLOBAL.STENCIL_old_array array=GLOBAL.STENCIL_array >
 (ivars_data,_,_) = datainfo;
 res=NULL; 
 for (p_dim=ivars_data; p_dim != NULL && p_dim != ""; p_dim = cdr(p_dim)) {
   res = AppendList(res, gen_stencil_boundary(p_dim, index, st_local));
   index = index + 1;
  }
  res
</xform>

<define REMOTE_COPY_NUM 0 />

<xform copy_boundary_arr_accesses pars=(input)  
        how_much_to_copy=GLOBAL.cp_num
        copynum = GLOBAL.REMOTE_COPY_NUM >
 (stencil_type,dim,_,dim_spec)=car GLOBAL.STENCIL_DATA_INFO;
  (ivars,_,_) = GLOBAL.STENCIL_DATA_IVARS_INFO;
 
 if (GLOBAL.REMOTE_COPY_NUM >= how_much_to_copy) return ("",input);
 array=InnerName(GLOBAL.STENCIL_array); 

 cp_res = input; init_res=NULL; done=MAP{}; permute=NULL;
 for (index=0; index<dim; index=index+1) permute=(index+1)::permute;

 arr_name=InnerName(GLOBAL.STENCIL_array);
 foreach ref = CODE.manycore_stencil_remote_arr_access#(CODE.manycore_stencil_remote_arr#(arr_name,CLEAR loc), CLEAR sub) \in input do 
   if (done[loc] == 1) continue; 
   nref = ref; dims=NULL; tocopy = TRUE;
   for ((index=dim-1;p1 = sub;p2=ivars;p3=ReverseList(loc)); p1 != NULL; (p1 = cdr(p1);p2=cdr(p2);p3=cdr(p3);index=index-1)) {
     ivar =car (p1); i = car(p2); cur_loc=car(p3); 
     foreach CODE.StencilDim#(i,lo=_,hi=_,dist=_,_) \in input do break; enddo
     if (ivar : Bop#("+"|"-",i, INT)) {
         nref = REPLACE(ivar, i, nref);
         ivar = i;
     }
     if (cur_loc == "local") {
        if (ivar == i) dims = CopyDim#(i,lo,CODE.manycore_stencil_size#(index,loc),1)::dims;
        else { tocopy =FALSE; break; }
     }
     else if (GLOBAL.STENCIL_HALLO : CODE.HalloDim#(i=_,lo=_,hi=_,dist=_)) {
       dims = CopyDim#(i,lo,REBUILD(hi-lo),dist) :: dims;
     }
     else  { dims = CopyDim#(i,ivar,1, 1)::dims; }
   }
   if (tocopy) {
   <<* print (nref ":" dims);
     done[loc]=1;
     TRACE(init_res cp_res,CopyRepl[init=1;trace_init=init_res;trace_decl=init_res;trace=cp_res;save=0;prefix=(loc"_cp");data_type=stencil_type;arr_ref_type=CODE.manycore_stencil_remote_arr_access;permute=(3 2 1)](nref, dims, ERASE(cp_res)));
    GLOBAL.REMOTE_COPY_NUM = GLOBAL.REMOTE_COPY_NUM +1;
    if (GLOBAL.REMOTE_COPY_NUM >= how_much_to_copy) break;
  }
 enddo
 (StmtList#init_res,cp_res)
</xform>

<xform gen_manycore_stencil pars=(body,repl_data,params) 
  trace=GLOBAL.TRACE_TARGET 
  trace_incl=GLOBAL.TRACE_INCL 
  trace_decl=GLOBAL.TRACE_DECL
  ivarinfo=GLOBAL.STENCIL_DATA_IVARS_INFO
  > 
  (stencil_type,dim,dimsizes,rdimsizes) = car GLOBAL.STENCIL_DATA_INFO;
  ivars = ivarinfo[0];
  <*3.5-D Blocking Optimization for Stencil Computations on Modern CPUs and GPUs.  by Anthony Nguyen et al. Intel Corporation*>
  origbody=body;
  if (body : CODE.Pragma#(p1=_,body1=_)) {
            body = body1;
  }

  if (repl_data == 0) {
     inner_stencil=body; 
  }
  else {
     inner_stencil = "";
     foreach inner_stencil=Nest#(Loop#(i=_,_,_,_),_) \in ERASE(body) s.t. 0 do  
        if (Lookup(i,ivars)) break;
        else inner_stencil="";
     enddo
  }
  rdimsizes = ReverseList(dimsizes);
  if (inner_stencil != "") {
    (init,local)=gen_manycore_stencil_local(inner_stencil);
    boundary = gen_stencil_boundaries(local);
    if (GLOBAL.cp_num > 0) {
       (init1, res1) = XFORM.copy_boundary_arr_accesses(boundary);
       local = AppendList(init1,local);
       boundary=res1;
    }
    old_array=InnerName(GLOBAL.STENCIL_old_array) ;
    array=InnerName(GLOBAL.STENCIL_array) ;
    local=gen_local_refs(old_array, array, dim,local); 
    boundary=gen_local_refs(old_array, array, dim,boundary);
    localrepl=TRACE((StmtList#init)::local);
    arrdims = ivars;
    if (GLOBAL.cp_lmem == 1 || GLOBAL.use_reg==1)
      for ((cp_scope=local; cp_dims=ivars); cp_scope : CODE.LocalStencil#(_,_,CLEAR cpbody); 
           (cp_scope=cpbody; cp_dims=cdr(cp_dims)) ) { }
    if (GLOBAL.cp_lmem == 1 && cp_dims != NULL) {
      foreach_r (local : (aref=GLOBAL.STENCIL_REF#(array,CLEAR sub)) : TRUE) {
         index=CODE.SharedDataCopyIndex#dimsizes;
         cp_scope=CopyRepl[prefix="s_data_buf";buf_init=Bop#("+","s_data",index);data_type=stencil_type;trace=localrepl;init=1](aref, cp_dims, cp_scope);
         array="s_data";
         arrdims = cp_dims;
         break;
      }
    } 
    if (GLOBAL.use_reg == 1) {
      if (cp_scope : Nest#(_,cp_body)) cp_scope=cp_body;
      ScalarRepl[data_type=stencil_type;trace=localrepl;init=1](array, arrdims, cp_scope);
    }
    nbody= REPLACE(inner_stencil, stencil_kernel_call#(localrepl,dimsizes, params), body);
  }
  else {
    nbody=body;
    boundary = "";
  }
  main=XFORM.gen_stencil_manycore_main(nbody,boundary,params, repl_data);
  REPLACE(origbody, main, trace);
  if (!Lookup(CODE.ManycoreLibInclude,trace_incl))
     Append_Include[trace=trace_incl](CODE.ManycoreLibInclude);
</xform>

<xform gen_stencil_manycore_main pars=(local, boundary, params, repl_data) 
          global_old_array=GLOBAL.STENCIL_old_array 
          global_array = GLOBAL.STENCIL_array 
          ivarinfo=GLOBAL.STENCIL_DATA_IVARS_INFO
          hallo=GLOBAL.STENCIL_HALLO 
          add_timing=GLOBAL.add_timing
         >
   datainfo=car GLOBAL.STENCIL_DATA_INFO;
   datainfo1=cdr GLOBAL.STENCIL_DATA_INFO;
  (stencil_type,dim,dimsizes,rdimsizes)=datainfo;
  (ivars, ivarsmacro, dataaccess)=ivarinfo;
  array=(OuterName(global_array));
  old_array=(OuterName(global_old_array)) ;
  old_array_inner=(InnerName(global_old_array)) ; array_inner=(InnerName(global_array)); 
  init1=init2="";
  if (repl_data != 0) {
    init2 = StmtList#(CODE.copy_stencil_manycore#(old_array,CODE.stencil_init_stmt#(old_array,ivarinfo,datainfo),ivars,datainfo) CODE.copy_stencil_manycore#(array,CODE.stencil_init_stmt#(array,ivarinfo,datainfo),ivars,datainfo) CODE.precopy_check_time); 
    init1 = CODE.StmtList#(CODE.ManycoreAllocateArray#(old_array,stencil_type, dimsizes)::CODE.ManycoreAllocateArray#(array,stencil_type, dimsizes)); 
    if (boundary != "" && !GLOBAL.gpu) { <<* replace inlined code
       local = REPLACE(old_array, Uop#("&",Name#("_" old_array)), local);
       local = REPLACE(array, Uop#("&", Name#("_" array)), local);
    }
    else { <<* replace function calls
       local = REPLACE(old_array, Name#("_" old_array), local);
       local = REPLACE(array, Name#("_" array), local);
    }
    local = StmtList#(local CODE.process_check_time);
    if (array_inner != array) {
       init2 = CODE.StmtList#(CODE.ManycoreArrayPtr#(old_array_inner,stencil_type)::CODE.ManycoreArrayPtr#(array_inner,stencil_type)::init2); 
       local1=local; boundary1=boundary;
       (local1,boundary1) = REPLACE(array_inner, Name#("_"^array_inner), (local1,boundary1));
       (local1,boundary1) = REPLACE(old_array_inner, Name#("_"^old_array_inner), (local1,boundary1));
       local=local1; boundary=boundary1;
    }
    finalize=StmtList#(CODE.copy_stencil_manycore#(old_array,CODE.stencil_copyback_stmt#(old_array,ivarinfo,datainfo),ivars,datainfo) CODE.copy_stencil_manycore#(array,CODE.stencil_copyback_stmt#(array,ivarinfo,datainfo),ivars,datainfo) CODE.postcopy_check_time CODE.free_resources);
    array_inner = Name#("_" array_inner);
    old_array_inner = Name#("_" old_array_inner);
    array = Name#("_" array);
  }
  else { 
      array = array_inner; old_array=old_array_inner;
      finalize=""; init2=""; 
  }
  if (hallo != "") { ivars = hallo[HalloDim.i]::ivars; }
  foreach inner=stencil_kernel_call#(localrepl,_,_) \in local do 
     (init st_local) = localrepl; 
     kernel = CODE.inner_stencil_manycore#(GLOBAL.STENCIL_TIME_IVARS, ivars,GLOBAL.STENCIL_DATA_INFO,params, st_local,boundary,old_array_inner,array_inner);
     if (!GLOBAL.gpu) 
        local=REPLACE(inner, kernel, local);
     else {
        Append_Include(kernel);
     }
     break;
  enddo

  if (!Lookup(CODE.stencil_macro, TRACE_INCL))
     Append_Include[trace=TRACE_INCL](CODE.stencil_macro#(dim,ivars,ivarsmacro)); 
  res = init1
      :: CODE.InitNumOfCores#(array,dimsizes,ivars)
      :: (if (add_timing) { CODE.TimingInit } else {""}) 
      :: init2
      :: local
      :: finalize
      ;
  return StmtList#res;
</xform>


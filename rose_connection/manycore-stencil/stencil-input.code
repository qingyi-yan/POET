include C++front.code

<define TOKEN (("#" "include")::(("#" "pragma")::C_TOKENS))/>
<define PARSE LIST(CODE.Include | CODE.Pragma | CODE.Macro | CODE.ExpOrVarDeclStmt | CODE.UnknownUntilEOL,"\n")/>
<define STMT_BASE CODE.Pragma | C_STMT_BASE />

<code Include pars=(file : CODE.String | CODE.File2) >
#include @file@
</code>

<code File2 pars=(content: (~">"....)) > <@content@> </code>

<code Pragma pars=(pragma : CODE.StencilPragma | CODE.ManycoreDeclPragma | CODE.UnknownUntilEOL, body : CODE.ExpOrVarDeclStmt|CODE.OMP_nest|CODE.Nest) >
#pragma @pragma@
@body@
</code>

<xform RebuildManycoreDecl pars=(arrs, decl) >
switch (arrs) {
 case (first rest) : 
       (res1,decl1)=RebuildManycoreDecl(first,decl); 
       (res2,decl2)=RebuildManycoreDecl(rest,decl1);
       (res1 :: res2, decl2)
 case CODE.ArrayConfig#(name,dim1):
       res1 =""; typeinfo=decl[DeclStmt.decl]; type_left=typeinfo;
       foreach (typeinfo: (cur=TypeInfo#(ArrayType#(CLEAR t,CLEAR dim2), name,_)): TRUE) 
       {
          foreach ( dim2 : (cur2=ArrayDim#(CLEAR d)) : TRUE) 
             dim2=REPLACE(cur2,d,dim2); 
          res1=BuildList(CODE.ManycoreArrayDeclStmt#(t,name,dim2,dim1),res1);
          type_left = REBUILD(REPLACE(cur,"",type_left));
       }
       res2=DeclStmt#type_left;
       (res1,res2)
 }
</xform>

<code ManycoreDeclPragma pars=(arrs : LIST(CODE.ArrayConfig,",")) >
array-manycore(@arrs@)
</code>

<code ArrayConfig pars=(arr : ID,dims:LIST("D"|"S",","))> @arr@(@dims@) </code>

<code StencilExtra pars=(type : "manycore"|CODE.Iterative|"") > -@type@ </code>

<code Iterative pars=(time:ID,lo:ID|INT,hi:ID|INT)> iterative(@time@,@lo@,@hi@) </code>

<code VariableNameList pars=(names : LIST(ID, " ")) > (@names@) </code>

<code StencilPragma pars=(name : ID, dim : "time"|"data", ivars : LIST(ID,","), 
dimsizes:CODE.StencilSizes|"", arrays : CODE.StencilArray, hallo:CODE.HaloSpec|"") >
stencil @name@ @dim@ <@ivars@> array @dimsizes arrays@ @hallo@
</code>

<code OMP_nowait > nowait </code>
<code OMP_private pars=(vars: LIST(ID,",")) > private(@vars@) </code>
<code OMP_reduction pars=(op:"+"|"*", var:ID) > reduction(@op@:@var@) </code>

<code OMP_nest pars=(omp_attr : LIST(OMP_private|OMP_reduction|OMP_nowait," "), body : CODE.Nest) rebuild=body>
#pragma omp for @omp_attr@
@body@
</code>

<code HaloSpec pars=( dim : LIST(CODE.HalloDim,""),copy : "copy_halo"|"")>
halo @dim haloSpec@
</code>

<code StencilSizes pars=(sizes : LIST(ID,"*")) > [@sizes@]</code>
<code HaloDim pars=(left : INT, right : INT) > <-@left@,@right@> </code>
<code StencilArray pars=(names : LIST(ID,",")) > <@names@> </code>

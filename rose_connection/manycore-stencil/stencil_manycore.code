include Loops.incl

<define TOKEN ("") />

<code ManycoreLibInclude > 

#include <vector>
#include <string>
using namespace std;
#include "core.h"
#include "multicore.h"

#ifndef CORE_NUM
#define CORE_NUM 1,1,2
#endif

#ifdef CHECK_TIME
#include <time.h>
#include "highresTimer.h"
#endif

</code>

<code SharedDataCopyIndex pars=(dimsizes) > 0 </code>

<code LocalArrayName pars=(name)> @name@Section </code>

<code ManycoreArrayDeclStmt pars=(t,name,dim1,dim2) >
@(extra=NULL; for (i=LEN(dim1); i < LEN(dim2); i=i+1) { extra=1::extra;})@
MulticoreArray<@t@> @name@(@ExpList#dim1@,@ExpList#extra ((extra=="")?"":",")@@ExpList#(REPLACE("S",1,REPLACE("D","CORE",dim2)))@,0,0);
</code>

<code manycore_neighbor_subscript pars=(loc)>
@ sub = NULL;
  for (p = loc; p != NULL; p = cdr(p)) { 
  switch (car(p)) {
   case "local": sub = AppendList(sub,"[1]");
   case "left":  sub=AppendList(sub,"[0]");
   case "right": sub=AppendList(sub,"[2]");
  }
  }
  sub@
</code>

<code manycore_stencil_remote_arr pars=(arr_name, loc) /> 
<code manycore_stencil_remote_arr_access pars=(arr, sub) >
@ dim=LEN(sub); manycore_stencil_remote_arr#(arr_name,loc) = arr; 
 for (i=0; i<dim-1; i=i+1) { sub=AppendList(sub,manycore_stencil_size#(i,loc)); }
arr_name@SectionPointers[cur_core->coreArrayNeighborhoodLinearized_@dim@D@(manycore_neighbor_subscript#(loc))@][otherCore_index@dim@D(@ExpList#sub@)]
</code>


<code is_boundary_core pars=(dim_idx,side, dim) > 
cur_core->boundaryCore_@dim@D[@dim_idx@][@((side=="left")?0:1)@]
</code>

<code manycore_stencil_size pars=(dim_index,loc) match=CODE.Name > 
@loc@_size@(dim_index)@
</code>

<xform gen_remote_copy_size_decl pars=(loc, dim) >
  res=1;
  for ( (i=0;p=loc);i<dim;(i=i+1;p=cdr(p))) {
     if (car(p) == "local") {
        res = manycore_stencil_size#(i,loc) * res;
     } 
  }
  (res == 1)? "" : ArraySubscript#res
</xform>

<code manycore_stencil_size_init pars=(dim,dim_idx,loc) >
int @loc@_size@dim_idx@ = cur_core->coreArrayNeighborhoodSizes_@dim@D@manycore_neighbor_subscript#(loc)@[@dim_idx@];
</code>

<xform gen_initialize_dimsizes pars=(dim) loc=("local" "left" "right")>
  neighbors=loc;
  for (i = 1; i < dim; i=i+1) {
      neighbors = gen_cartesian_product("::",loc,neighbors);
  }
  res = NULL;
  for (p = neighbors; p != NULL; p = cdr(p)) 
     for (j = 0; j < dim; j=j+1) 
        res = manycore_stencil_size_init#(dim,j, car(p)) :: res;
  res
</xform>

<code stencil_init_stmt pars=(name, ivarinfo, datainfo)>
@(_,dim, _, sizes) =datainfo;
 (ivars,_,_) = ivarinfo;
manycore_stencil_local_arr#(name,dim,ivars)@=@name@[cpstart+@gen_linearized_ref(ivars, cdr(sizes))@];
</code>

<code stencil_copyback_stmt pars=(name, ivarinfo,datainfo)>
@(_,dim, _, sizes) =datainfo;
(ivars,_,_) = ivarinfo;
name@[cpstart+@gen_linearized_ref(ivars,sizes)@] = @manycore_stencil_local_arr#(name,dim,ivars)@;
</code>


<xform gen_CopyManycoreArray pars=(dim,ivars,cpstmt) >
index = 0; res = cpstmt;
for ( pi = ivars; pi != NULL; pi = cdr(pi)) {
  res = Nest#(Loop[decl="int"]#(car(pi),0,manycore_stencil_size#(index,gen_local_loc(dim)),1), res);
  index = index +1;
}
res
</xform>

<code init_stencil_array pars=(T,name, prefix)>
@T@** @prefix@SectionPointers = (@name@).get_arraySectionPointers();
</code>

<xform gen_copy_address_start pars=(name,ivars,datainfo) >
 (_,dim,sizes,_)=datainfo;
 res = gen_linearized_ref(ivars,sizes); p = ivars;
 for (i = 0; i < dim; i=i+1) {
   res = REPLACE(car(p),Bop#(".",ArrayAccess#(Bop#(".",Name#("_" name),FunctionCall#("get_arraySectionRanges",i)),"core"),"first"), res);
   p = cdr(p);
 }
  return res;
</xform>

<code copy_stencil_manycore pars=(name,cpstmt,ivars,datainfo) >
{
    @((T,dim,_,sizes)=datainfo; init_stencil_array#(T,Name#("_"name), name))@
    #pragma omp parallel for 
    for (int core = 0; core < numberOfCores; core++)
    {
      int @ExpList#ivars@;
      @T@* @name@Section     = @name@SectionPointers[core];
      Core<@T@>* cur_core =  (_@name@).get_coreArray()[core];
      @StmtList#(gen_initialize_dimsizes[loc="local"](dim))@
      int cpstart = @gen_copy_address_start(name,ivars,datainfo)@;
      @gen_CopyManycoreArray(dim,ivars,cpstmt)@
    }
}
</code>


<code inner_stencil_manycore  
      pars=(time,ivars,datainfo,params,st_local,boundary, old_array, array) 
            add_timing=GLOBAL.add_timing >
@ (T,dim,dimsizes,_) = car(datainfo);
if (time != NULL && cdr(datainfo)==NULL) {
  array_ref =  Uop#("*",array);
  init = StmtList#(init_stencil_array#(T, Uop#("*",array),array) init_stencil_array#(T, Uop#("*",old_array),old_array));
}
else { 
  array_ref = array;
  init = StmtList#(init_stencil_array#(T, array,array) "\n" init_stencil_array#(T, old_array,old_array));
}@
@init@
#pragma omp parallel for 
for (int core = 0; core < numberOfCores; core++)
{
   @T@* @array@Section     = @array@SectionPointers[core];
   @T@* @old_array@Section = @old_array@SectionPointers[core];

   Core<@T@>* cur_core =  (@array_ref@).get_coreArray()[core];
   @StmtList#(gen_initialize_dimsizes(dim))@
@(if (add_timing) {@
#ifdef TIMING
   int tid = omp_get_thread_num();
   clock_gettime(CLOCK_REALTIME, &time1[tid]);
#endif
@})@
   @st_local@
@(if (add_timing) {@
#ifdef TIMING
     clock_gettime(CLOCK_REALTIME, &time2[tid]);
     ctrExecTime[tid] = diff(time1[tid],time2[tid]);
     clock_gettime(CLOCK_REALTIME, &time1[tid]);
#endif
@})@
   //***************************************
   // Now process the edges and corners
   // ***************************************
   @StmtList#(boundary)@
   // **************************************************
   // End of processing the corners of the X and Y axis.
   // **************************************************
@(if (add_timing) {@
#ifdef TIMING
  // Get and report the time.
     clock_gettime(CLOCK_REALTIME, &time2[tid]);
     bdyExecTime[tid] = diff(time1[tid],time2[tid]);
#endif
@})@
}                              
@(if (add_timing) {@
#ifdef TIMING
double ctrTime=0.0, bdyTime=0.0;
for (int core = 0; core < numberOfCores; core++)
{
  ctrTime += (ctrExecTime[core].tv_sec) + (ctrExecTime[core].tv_nsec) / 1e9;
  bdyTime += (bdyExecTime[core].tv_sec) + (bdyExecTime[core].tv_nsec) / 1e9;
}
cout << "center time:" << ctrTime/numberOfCores << endl;
cout << "boundry time:" << bdyTime/numberOfCores << endl;
#endif
@})@
</code>

<code ManycoreAllocateArray pars=(name,elemtype, dimsizes) >
MulticoreArray<@elemtype@> _@name@(@ExpList#dimsizes@,CORE_NUM,0,true);
</code>

<code ManycoreArrayPtr pars=(name, elemtype) >
MulticoreArray<@elemtype@>* _@name@;
</code>


<code InitNumOfCores pars=(array,dimsizes,ivars)>
int numberOfCores = (@array@).get_numberOfCores();
</code>

<code LocalIndexInit pars=(var, index) >
int @var@;
</code>

<code LocalStencil pars=(dim_spec, dim_index, body) >
@ StencilDim#(i,lo,hi,dist,dim) = dim_spec; 
@for (int @i@=@REBUILD(lo+dist)@; @i@<@manycore_stencil_size#(dim_index,gen_local_loc(dim))@-@dist@; @i@++) 
{
  @StmtList#(body)@
}
</code>

<code MulticoreArray pars=(t)> MulticoreArray<@t@> </code>

<code free_resources> @""@ </code>

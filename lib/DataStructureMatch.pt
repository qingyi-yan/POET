include utils.incl

<xform GenDataMatchSpecification pars=(anchors, org_spec, impl_spec)>
 CODE.OpSpec#(org_in, org_out) = org_spec;
 GraphSpec#(new_pos, org_nextto_out, org_reach_out, org_alias_out) = org_out;
 GraphSpec#(org_nodes_in, org_nextto_in, org_reach_in, org_alias_in) = org_in;
 org_nodes = AppendList[erase_replicate=1](org_nodes_in, new_pos);

 pos_variables = NULL;
 nextto_rels = reach_rels = alias_rels = NULL;
 index = 0;
 num_of_nodes = 0;
 for (pg_out = impl_spec; pg_out != NULL; pg_out = cdr(pg_out)) {
   CODE.OpSpec#(g_in, g_out) = car(pg_out);
   nodes_in = AppendList[erase_replicate=1](org_nodes_in, g_in[GraphSpec.nodes]);
   for (p_nodes_in = nodes_in; p_nodes_in != NULL; p_nodes_in=cdr(p_nodes_in)) {
       alias_rels = CODE.UnchangedPosition#(car p_nodes_in, "in"^index, "out"^index) :: alias_rels;
   }

   tag = "out" ^ index; 
   GraphSpec#(g_nodes, cur_nextto, cur_reach, cur_alias) = g_out;
   num_of_nodes = num_of_nodes + LEN(nodes_in) + LEN(g_nodes);
   g_nodes = AppendList(g_in[GraphSpec.nodes], g_nodes); 

   cur_pos = AppendList[erase_replicate=1](org_nodes, g_nodes);
   pos_variables = CODE.PositionVariableDefinition#(tag,cur_pos, new_pos) :: pos_variables;
   cur_nextto = AppendList(org_nextto_out, cur_nextto);
   cur_reach = AppendList(org_reach_out, cur_reach);
   cur_alias = AppendList(org_alias_out, cur_alias);
   nextto_rels = CODE.NextToDefinition#(tag, cur_nextto) :: nextto_rels;
   reach_rels = CODE.ReachDefinition#(tag, cur_reach) :: reach_rels;
   alias_rels = CODE.AliasDefinition#(tag, cur_alias) :: alias_rels;

   tag = "in" ^ index; 
   GraphSpec#(g_nodes, cur_nextto, cur_reach, cur_alias) = g_in;
   cur_pos = AppendList[erase_replicate=1](org_nodes, g_nodes);
   pos_variables = CODE.PositionVariableDefinition#(tag,cur_pos, new_pos) :: pos_variables;
   cur_nextto = AppendList(org_nextto_in, cur_nextto);
   cur_reach = AppendList(org_reach_in, cur_reach);
   cur_alias = AppendList(org_alias_in, cur_alias);
   nextto_rels = CODE.NextToDefinition#(tag, cur_nextto) :: nextto_rels;
   reach_rels = CODE.ReachDefinition#(tag, cur_reach) :: reach_rels;
   alias_rels = CODE.AliasDefinition#(tag, cur_alias) :: alias_rels;

   index = index + 1;
 }
 return SMTSpecification#(num_of_nodes, index, new_pos, pos_variables, anchors, nextto_rels, reach_rels, alias_rels);
</xform>
